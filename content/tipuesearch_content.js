var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  ldodwua \n 個人倉儲: https://github.com/mdecp2024/hw-41323137cjc \n 個人網站: https://mdecp2024.github.io/hw-41323137cjc/content/index.html \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7_hw', 'text': '介紹如何加入brython \n \n 我已經學會簡單的python程式 \n \n', 'tags': '', 'url': 'w7_hw.html'}, {'title': 'w9', 'text': 'triangle programs \n', 'tags': '', 'url': 'w9.html'}, {'title': 'w10_hw', 'text': '題目一: \n \n \n 題目二: \n \n 不能與關鍵字衝突、避免覆蓋內建函數 \n \n 題目三: \n \n 做完這個讓我感到有成就感，可以利用程式來解決問題 \n \n', 'tags': '', 'url': 'w10_hw.html'}, {'title': 'w11_hw', 'text': '題目一: \n \n 已知可以用 Python 程式由上往下列印三角形 *, 或由左往右列印三角形 *, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域 \n 第一題解答:" *"字號圓形 \n # 圓心位置\nh, k = 5, 5\n# 圓的半徑\nr = 4\n# 遍歷 10x10 的區域\nfor y in range(10):\n    for x in range(10):\n        # 計算每個點與圓心的距離\n        distance = ((x - h) ** 2 + (y - k) ** 2) ** 0.5\n        # 如果距離小於或等於圓的半徑，則列印 "*"\n        if distance <= r:\n            print(\'*\', end=\'\')\n        else:\n            print(\' \', end=\'\')  # 空格表示不是圓的一部分\n    print()  # 換行到下一列 \n \n 題目二: \n  已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.網頁上的方格與塗色 \n 第二題解答: 網頁上的方格與塗色 \n from browser import html\nfrom browser import document as doc\nimport math\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 20  # Grid size remains the same, each square is 20x20\n\n# gs*tc = canvas width and height\n\nctx = canvas.getContext("2d")\n\ndef dRect(lux, luy, w, h, s=1, c=\'#ff0000\'):\n    ctx.lineWidth = s\n    ctx.strokeStyle = c\n    ctx.beginPath()\n    ctx.rect(lux, luy, w, h)\n    ctx.stroke()\n\ndef fill(x, y, color):\n    ctx.fillStyle = color\n    ctx.fillRect(x-1, y-1, gs, gs)\n\ndef drawFilledCircle(center_x, center_y, radius):\n    # Fill the circle with black squares\n    for i in range(center_x - radius, center_x + radius + 1):\n        for j in range(center_y - radius, center_y + radius + 1):\n            # Calculate the distance from the center\n            distance = math.sqrt((i - center_x) ** 2 + (j - center_y) ** 2)\n            \n            # If the distance is less than or equal to the radius, fill the square\n            if distance <= radius:\n                fill(i * gs, j * gs, "black")  # Draw the square\n\ndef grid(width, height, grid_pix):\n    for i in range(width):\n        for j in range(height):\n            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")\n\ngrid(10, 10, gs)  # Create a 10x10 grid\ndrawFilledCircle(5, 5, 4)  # Draw a filled circle with radius 4 at the center of the grid\n \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12', 'text': '', 'tags': '', 'url': 'w12.html'}, {'title': 'w13_hw', 'text': 'w13_hw \n \n w13 \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n \n \n \n \n \n <!-- 導入 brython 程式庫 -->\n<p>\n<script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n</p>\n<!-- 啟動 Brython -->\n<p>\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script>\n</p>\n<div id="brython_div1"></div>\n<p>\n<script type="text/python3">\nfrom browser import html\nfrom browser import document as doc\nimport math\n\ncanvas = html.CANVAS(width=500, height=500)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\nctx = canvas.getContext("2d")\nctx.lineWidth = 4\n\n# 混色的\nctx.globalCompositeOperation = "screem"\n\n# 黑邊圓*2 (每個畫四個邊邊)\nctx.strokeStyle = \'black\'\n\n# 第一個圓\nctx.beginPath()\nctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)\nctx.fillStyle = "SkyBlue"  \nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)\nctx.fillStyle = "Coral"  \nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)\nctx.fillStyle = "LimeGreen"  \nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)\nctx.fillStyle = "Beige"  \nctx.fill()\nctx.stroke()\n\n# 第二個圓\nctx.beginPath()\nctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)\nctx.fillStyle = "DarkOrchid" \nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)\nctx.fillStyle = "ForestGreen"  \nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)\nctx.fillStyle = "Gold"  \nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)\nctx.fillStyle = "Crimson" \nctx.fill()\nctx.stroke()\n\n# 紅方形*2 (4個三角形)\nctx.strokeStyle = \'red\'\nctx.beginPath()\nctx.moveTo(60, 60)\nctx.lineTo(60, 260)\nctx.lineTo(260, 260)\nctx.fillStyle = "LightYellow" \nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(60, 60)\nctx.lineTo(260, 60)\nctx.lineTo(260, 260)\nctx.fillStyle = "DarkSlateBlue"  \nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(160, 160)\nctx.lineTo(360, 160)\nctx.lineTo(360, 360)\nctx.fillStyle = "LightCyan" \nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(160, 160)\nctx.lineTo(160, 360)\nctx.lineTo(360, 360)\nctx.fillStyle = "PaleGreen"  \nctx.fill()\nctx.stroke()\n\n# 重疊的小方型\nctx.beginPath()\nctx.moveTo(160, 160)\nctx.lineTo(160, 260)\nctx.lineTo(260, 260)\nctx.fillStyle = "SteelBlue"  \nctx.fill()\nctx.stroke()\n\nctx.beginPath()\nctx.moveTo(160, 160)\nctx.lineTo(260, 160)\nctx.lineTo(260, 260)\nctx.fillStyle = "MediumPurple" \nctx.fill()\nctx.stroke()\n\n# 藍斜線\nctx.strokeStyle = \'blue\'\nctx.beginPath()\nctx.moveTo(60, 60)\nctx.lineTo(260, 260)\nctx.stroke()\n</script> \n w13 <<  Previous   Next  >> w14_ex \n  footer  \n \n \n  Link back to Colorlib can\'t be removed. Template is licensed under CC BY 3.0.   Copyright ©\n \nAll rights reserved | This template is made with   by  Colorlib    Link back to Colorlib can\'t be removed. Template is licensed under CC BY 3.0.  \n \n \n  for footer  \n \n  for site wrap  \n \n  <script src="../cmsimde/static/chimper/js/jquery-3.3.1.min.js"></script>  \n \n \n \n \n \n \n \n \n \n \n \n            <script src="../cmsimde/static/chimper/js/typed.js"></script>\n                    <script>\n                    var typed = new Typed(\'.typed-words\', {\n                    strings: ["Web Apps"," WordPress"," Mobile Apps"],\n                    typeSpeed: 80,\n                    backSpeed: 80,\n                    backDelay: 4000,\n                    startDelay: 1000,\n                    loop: true,\n                    showCursor: true\n                    });\n                    </script>\n             \n \n  啟用 LaTeX equations 編輯  \n <!-- \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_ex', 'text': 'w14_ex\xa0 程式 \n 請根據兩個圓繪圖所圍成的 區域 (目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各區域的著色任務. \n from browser import document, html\nimport math\n\n# 初始化 HTML，確保 canvas 元素存在\ndef setup_canvas():\n    if not document.querySelector("#my_canvas"):\n        canvas = html.CANVAS(id="my_canvas", width=800, height=600)\n        document <= canvas\n\nsetup_canvas()\n\n# 判斷點 (x, y) 是否在圓內，圓的圓心為 (cx, cy)，半徑為 r\ndef is_inside_circle(x, y, cx, cy, r):\n    distance = math.sqrt((x - cx) ** 2 + (y - cy) ** 2)\n    return distance <= r\n\n# 繪製圓\ndef draw_circle(ctx, cx, cy, r):\n    ctx.beginPath()\n    ctx.arc(cx, cy, r, 0, 2 * math.pi)\n    ctx.stroke()\n\n# 獲取 canvas 上下文\ncanvas = document["my_canvas"]\nctx = canvas.getContext("2d")\n\n# 用戶輸入三個圓的圓心座標和半徑\ncircle1_center_x = float(input("輸入第一個圓的圓心 x 座標: "))\ncircle1_center_y = float(input("輸入第一個圓的圓心 y 座標: "))\ncircle1_radius = float(input("輸入第一個圓的半徑: "))\n\ncircle2_center_x = float(input("輸入第二個圓的圓心 x 座標: "))\ncircle2_center_y = float(input("輸入第二個圓的圓心 y 座標: "))\ncircle2_radius = float(input("輸入第二個圓的半徑: "))\n\ncircle3_center_x = float(input("輸入第三個圓的圓心 x 座標: "))\ncircle3_center_y = float(input("輸入第三個圓的圓心 y 座標: "))\ncircle3_radius = float(input("輸入第三個圓的半徑: "))\n\n# 繪製三個圓\ndraw_circle(ctx, circle1_center_x, circle1_center_y, circle1_radius)\ndraw_circle(ctx, circle2_center_x, circle2_center_y, circle2_radius)\ndraw_circle(ctx, circle3_center_x, circle3_center_y, circle3_radius)\n\n# 遍歷一定範圍的點來確定所屬區域並著色\nwidth = canvas.width\nheight = canvas.height\nfor x in range(0, width, 5):\n    for y in range(0, height, 5):\n        in_circle1 = is_inside_circle(x, y, circle1_center_x, circle1_center_y, circle1_radius)\n        in_circle2 = is_inside_circle(x, y, circle2_center_x, circle2_center_y, circle2_radius)\n        in_circle3 = is_inside_circle(x, y, circle3_center_x, circle3_center_y, circle3_radius)\n\n        if in_circle1 and in_circle2 and in_circle3:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "purple"  # 三個圓重疊區域設為紫色\n            ctx.fill()\n        elif in_circle1 and in_circle2:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "blue"  # 僅在圓1、圓2重疊（不含圓3重疊部分）區域設為藍色\n            ctx.fill()\n        elif in_circle1 and in_circle3:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "green"  # 僅在圓1、圓3重疊（不含圓2重疊部分）區域設為綠色\n            ctx.fill()\n        elif in_circle2 and in_circle3:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "yellow"  # 僅在圓2、圓3重疊（不含圓1重疊部分）區域設為黃色\n            ctx.fill()\n        elif in_circle1:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "cyan"  # 僅在圓1內（不含和其他圓重疊部分）區域設為青色\n            ctx.fill()\n        elif in_circle2:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "magenta"  # 僅在圓2內（不含和其他圓重疊部分）區域設為品紅\n            ctx.fill()\n        elif in_circle3:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "orange"  # 僅在圓3內（不含和其他圓重疊部分）區域設為橙色\n            ctx.fill()\n        else:\n            ctx.beginPath()\n            ctx.arc(x, y, 2, 0, 2 * math.pi)\n            ctx.fillStyle = "gray"  # 三個圓外的區域設為灰色\n            ctx.fill() \n \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'w15', 'text': '題目一: 從 1 累加到 100"作為 anchor \n 從 1 累加到 100"作為 anchor 的連結標題 \n sum_result = 0 #建立變數sum_result\ni = 1 #指定i等於1\nwhile i <= 100:     #使用while迴圈把i加到等於100\n    sum_result += i   \n    i += 1\nprint(sum_result) \n 題目二: addto \n 設計一個函式 addto(1, 100), 可以完成上述的累加結果. (以"addto"作為連結標題) \n #運算程式\ndef addto(start, end):   #定義函數addto\n    sum_result = 0       #設定數值sum_result=0\n    i = start            #設定i=start\n    while i <= end:      #設結束之值為end\n        sum_result += i  \n        i += 1\n    return sum_result    #終止函數運行並返回數值至result\n     \n#調用程式\nresult = addto(1, 100)   #設定起始值\nprint(result)            #列印result \n 題目三: addto  add_only_even   \n 設計一個函式add_only_even(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加結果, 但只納入偶數. \n def add_only_even(start, end):\n    """\n    計算從 start 到 end (包含) 的所有偶數的總和。\n\n    :param start: 起始整數\n    :param end: 結束整數\n    :return: 偶數總和\n    """\n    total = 0\n    for num in range(start, end + 1):\n        if num % 2 == 0:\n            total += num\n    return total\n\n# 範例使用\nresult = add_only_even(1, 100)\nprint(f"從 1 到 100 的偶數總和為: {result}")\n \n 題目四: add_avoid_8 \n 設計一個函式add_avoid_8(1, 100), 可以完成從第一個輸入整數, 累加到第二個輸入變數的累加過程, 必須避開數字出現"8"的整數. \n def add_avoid_8(init, addto):\n    sum = 0\n    for i in range(init, addto + 1):\n        # Check if the number contains the digit "8"\n        if "8" in str(i):\n            continue  # Skip numbers that contain \'8\'\n        else:\n            sum += i  # Add the number to the sum if it doesn\'t contain \'8\'\n    return sum\n \n# Test the function\nresult = add_avoid_8(1, 100)\nprint(result) \n', 'tags': '', 'url': 'w15.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam', 'text': '繪製圖形程式碼 \n \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n', 'tags': '', 'url': 'w16_exam.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w16_exam2', 'text': '', 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};